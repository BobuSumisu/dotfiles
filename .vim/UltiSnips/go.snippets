snippet /^package/ "Package" r
package ${1:main}
endsnippet

snippet /^import/ "Import" r
import (
	"${1:package}"
)
endsnippet

snippet /^const/ "Const" r
const (
	${1:name}${2/(.+)/ /}${2:type} = ${0:value}
)
endsnippet

snippet /^iota/ "Iota" r
const (
	${1:name}${2/(.+)/ /}${2:type} = iota
)
endsnippet

snippet struct "Struct"
type ${1:name} struct {
	${0:${VISUAL}}
}
endsnippet

snippet interface "Interface" b
type ${1:name} interface {
	${0:${VISUAL}}
}
endsnippet

snippet /^main/ "Main Function" r
func main() {
	${0:${VISUAL}}
}
endsnippet

snippet /^func/ "Function" r
func ${1:name}(${2:params})${3/(.+)/ /}${3:type} {
	${0:${VISUAL}}
}
endsnippet

snippet /^meth/ "Method" r
func (${1:receiver} ${2:type}) ${3:name}(${4:params})${5/(.+)/ /}${5:type} {
	${0:${VISUAL}}
}
endsnippet

snippet gofunc "Goroutine" b
go func() {
	${0:${VISUAL}}
}()
endsnippet

snippet if "If" b
if ${1:condition} {
	${0:${VISUAL}}
}
endsnippet

snippet for "For" b
for ${1:initial}; ${2:condition};${3/(.+)/ /}${3:increment} {
	${0:${VISUAL}}
}
endsnippet

snippet range "For range" b
for ${1:var} := range ${2:elements} {
	${0:${VISUAL}}
}
endsnippet

snippet err "Simple error handling" b
if ${1:err} != nil {
	log.${2:Fatal}($1}
}
endsnippet

snippet /^test/ "Test" r
func Test${1:Name}(t *testing.T) {
	${0:${VISUAL}}
}
endsnippet

snippet /^example/ "Example" r
func Example${1:Name}() {
	${0:${VISUAL}}
	// Output:
}
endsnippet

snippet /^benchmark/ "Benchmark" r
func Benchmark${1:Name}(b *testing.B) {
	for i := 0; i < b.N; i++ {
		${0:${VISUAL}}
	}
}
endsnippet

snippet switch "Switch" b
switch ${1:expr} {
case ${2:value}:
	${0:${VISUAL}}
}
endsnippet
